import clsx from "clsx";
import { type FormEvent, useEffect, useRef, useState, type FC } from "react";
import style from "./Form.module.scss";
import Card from "../Card/Card";
import { useAppDispatch, useAppSelector } from "../../app/hooks";
import {
  fetchCards,
  resetCardsStatus,
  selectPopularCards,
} from "../../app/reducers/cardsSlice";
import Loader from "../Loader/Loader";
import type { TCard } from "../../app/reducers/cardsSlice";
import gsap from "gsap";
import { useGSAP } from "@gsap/react";

const Form: FC = () => {
  const button = useRef(null);
  const [privacy, setPrivacy] = useState(true);
  const [isBackup, setIsBackup] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const handleBackup = () => {
    setIsBackup(true);
    dispatch(resetCardsStatus());
    dispatch(fetchCards(true));
  };
  const dispatch = useAppDispatch();
  const popularCards = useAppSelector(selectPopularCards);

  const cardsStatus = useAppSelector(state => state.cards.status);
  const error = useAppSelector(state => state.cards.error);

  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
    e.preventDefault();
  };

  gsap.registerPlugin(useGSAP);
  useGSAP(() => {
    gsap.fromTo(
      button.current,
      { opacity: 1 },
      { opacity: 0.3, duration: 0.5, repeat: -1, yoyo: true },
    );
  });

  useEffect(() => {
    if (cardsStatus === "idle") {
      dispatch(fetchCards(isBackup));
    }
    if (cardsStatus === "loading") {
      setIsLoading(true);
    }
    if (cardsStatus === "succeeded" || cardsStatus === "failed") {
      const timer = setTimeout(() => setIsLoading(false), 2000);
      return () => clearTimeout(timer);
    }
  }, [cardsStatus, dispatch, isBackup]);

  let content;

  if (cardsStatus === "loading" || isLoading) {
    content = <Loader />;
  } else if (cardsStatus === "succeeded") {
    if (popularCards) {
      content = (
        <div className={clsx(style.form__cards)}>
          {popularCards.map((card: TCard) => (
            <Card key={card.id} card={card} />
          ))}
        </div>
      );
    }
  } else if (cardsStatus === "failed") {
    content = (
      <>
        <p
          className={clsx(style.form__info)}
        >{`–ß—Ç–æ-—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—èüòï. ${error}. –ù–æ –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–º–∏—Ç–∞—Ü–∏—é –∑–∞–≥—Ä—É–∑–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞.`}</p>
        <button onClick={handleBackup} className={clsx(style.form__submit)}>
          ‚§∑ –ó–∞–ø—É—Å—Ç–∏—Ç—å
        </button>
      </>
    );
  }

  return (
    <form
      className={clsx(style.content__form, style.form)}
      onSubmit={handleSubmit}
    >
      {content}
      <p className={clsx(style.form__info)}>
        –°–ª–µ–¥—É—è –ø–ª–∞–Ω—É –Ω–∞ 3 –º–µ—Å—è—Ü–∞, –ª—é–¥–∏ –ø–æ–ª—É—á–∞—é—Ç –≤ 2 —Ä–∞–∑–∞ –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á–µ–º
        –∑–∞ 1 –º–µ—Å—è—Ü
      </p>
      <fieldset className={clsx(style.form__fieldset)}>
        <input
          type="checkbox"
          className={clsx(style.form__checkbox)}
          id="privacy"
          checked={privacy}
          onChange={() => setPrivacy(state => !state)}
        />
        <label htmlFor="privacy" className={clsx(style.form__label)}>
          –Ø —Å–æ–≥–ª–∞—à–∞—é—Å—å —Å{" "}
          <a className={clsx(style.form__link)} href="!#">
            –ü—Ä–∞–≤–∏–ª–∞–º–∏ —Å–µ—Ä–≤–∏—Å–∞
          </a>{" "}
          –∏ —É—Å–ª–æ–≤–∏—è–º–∏
          <a className={clsx(style.form__link)} href="!#">
            {" "}
            –ü—É–±–ª–∏—á–Ω–æ–π –æ—Ñ–µ—Ä—Ç—ã
          </a>
          .
        </label>
      </fieldset>

      <input
        type="submit"
        className={clsx(style.form__submit)}
        id="privacy"
        checked={privacy}
        onChange={() => setPrivacy(state => !state)}
        value="–ö—É–ø–∏—Ç—å"
        ref={button}
      />
      <p className={clsx(style.form__privacy)}>
        –ù–∞–∂–∏–º–∞—è ¬´–ö—É–ø–∏—Ç—å¬ª, –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–ø–∏—Å–∞–Ω–∏–µ
        –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –∫—É–ø–ª–µ–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞. –î–∞–ª—å–Ω–µ–π—à–∏–µ —Å–ø–∏—Å–∞–Ω–∏—è –ø–æ
        —Ç–∞—Ä–∏—Ñ–∞–º —É—á–∞—Å—Ç–≤—É—é—â–∏–º –≤ –∞–∫—Ü–∏–∏ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—é—Ç—Å—è –ø–æ –ø–æ–ª–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ
        –æ—Ñ–µ—Ä—Ç–µ.
      </p>
    </form>
  );
};
export default Form;
